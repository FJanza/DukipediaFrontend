---
import {getCollection} from "astro:content";

const freestyles = await getCollection("freestyles");
---

<div class="carouselContainer">
  <div class="carouselOfImages">
    {
      freestyles
        .sort(
          (a: any, b: any) =>
            new Date(a.data.date).getTime() - new Date(b.data.date).getTime()
        )
        .map((free) => {
          console.log(free.id);
          return (
            <div class="carouselImage">
              <card class="p-2 bg-cyan-300/70 h-full rounded-md">
                <h3 class="min-h-16 text-base md:text-lg font-bold">
                  {free.data.title}
                </h3>
                <img src={free.data.thumbnails.high?.url} loading="lazy" />
                <h5 class="text-sm md:text-base font-semibold text-white/70">
                  {free.data.subtitle}
                </h5>
              </card>
              <div class="relative flex flex-col items-center w-full  mt-3">
                <div class="circle w-4 h-4 rounded-full bg-white z-30" />
                <span class="text-sm md:text-base font-semibold">
                  {new Date(free.data.date).toLocaleDateString()}
                </span>
              </div>
              <divider class="hidden md:block absolute w-full h-[49px] border-t-2 border-[#aeaeae] bottom-0" />
            </div>
          );
        })
    }
  </div>
</div>

<style>
  .carouselOfImages {
    position: relative;
    margin: auto;
    overflow: visible;
    width: 100%;
  }

  .carouselImage {
    position: relative;
    display: flex;
    padding: 1rem;
    flex-direction: column;
    justify-content: space-between;
    width: 20%;
    height: 450px;
    counter-increment: carousel-cell;
    text-align: center;
    vertical-align: center;
    transition: transform 0.5s;
    font-size: 1.2em;
    z-index: 30;
    card {
      border: 1.5px solid transparent;
    }
  }
  .carouselImage.is-selected {
    z-index: 40;
    transform: scale(1);
    .circle {
      transform: scale(1.5);
    }
    card {
      border: 2px solid rgba(19, 227, 255, 0.945);
      background-color: rgba(128, 128, 128, 0.384);
      transition:
        background-color 0.3s ease,
        color 0.3s ease;
      transition: transform 0.5s;
      transform: scale(1.04);
    }
  }
  @media only screen and (max-width: 1300px) {
    .carouselImage {
      width: 40%;
    }
  }
  @media only screen and (max-width: 773px) {
    .carouselImage {
      width: 60%;
    }
  }
  @media only screen and (max-width: 490px) {
    .carouselImage {
      width: 100%;
    }
  }

  .carouselImage.nextToSelectedLeft,
  .carouselImage.nextToSelectedRight {
    transform: scale(1);
    z-index: 5;
  }

  /*! Flickity v2.0.5
https://flickity.metafizzy.co
---------------------------------------------- */

  .flickity-enabled {
    position: relative;
  }

  /* .flickity-enabled:focus { outline: none; } */

  .flickity-viewport {
    overflow: hidden;
    position: relative;
    height: 100%;
  }

  .flickity-slider {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  /* draggable */

  .flickity-enabled.is-draggable {
    -webkit-tap-highlight-color: transparent;
    /*           tap-highlight-color: transparent; */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  .flickity-enabled.is-draggable .flickity-viewport {
    cursor: move;
    cursor: -webkit-grab;
    cursor: grab;
  }

  .flickity-enabled.is-draggable .flickity-viewport.is-pointer-down {
    cursor: -webkit-grabbing;
    cursor: grabbing;
  }
  .flickity-viewport {
    margin: 0px;
    width: 100%;
    margin-bottom: 100px;
  }
</style>

<script>
  // Initialize Flickity carousel
  var carousel = document.querySelector(".carouselOfImages");
  // @ts-ignore: T2304
  var flkty = new Flickity(carousel, {
    // Options
    accessibility: false,
    autoPlay: false,
    pauseAutoPlayOnHover: false,
    cellAlign: "center",
    contain: false,
    draggable: true,
    friction: 0.75,
    initialIndex: 0,
    lazyLoad: true,
    percentPosition: true,
    prevNextButtons: false,
    pageDots: false,
    resize: true,
    rightToLeft: false,
    setGallerySize: true,
    watchCSS: false,
    wrapAround: true,
  });

  // Resize the cells dynamically
  function resizeCells() {
    var selectedIndex = flkty.selectedIndex;
    var totalCells = flkty.cells.length;
    var imageNumLimit = 14;

    if (totalCells < imageNumLimit) {
      flkty.destroy();
      return;
    }

    // Remove classes from all images
    var images = document.querySelectorAll(".carouselOfImages .carouselImage");
    images.forEach(function (image) {
      image.classList.remove(
        "nextToSelectedLeft",
        "nextToSelectedRight",
        "nextToSelectedLeft2",
        "nextToSelectedRight2"
      );
    });

    // Add classes to left and right adjacent images
    if (selectedIndex - 1 >= 0) {
      images[selectedIndex - 1].classList.add("nextToSelectedLeft");
    }
    if (selectedIndex - 2 >= 0) {
      images[selectedIndex - 2].classList.add("nextToSelectedLeft2");
    }

    var endCell = selectedIndex + 1 === totalCells ? 0 : selectedIndex + 1;
    images[endCell].classList.add("nextToSelectedRight");

    if (endCell + 1 < totalCells) {
      images[endCell + 1].classList.add("nextToSelectedRight2");
    } else {
      images[0].classList.add("nextToSelectedRight2");
    }
  }

  // Call resizeCells on page load and on scroll event
  resizeCells();

  flkty.on("scroll", function () {
    resizeCells();
  });
</script>
