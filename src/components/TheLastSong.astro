---
import {getCollection} from "astro:content";
import {IMG_URL_DEFAULT_VIDEO_NOT_FOUND} from "../utils/constants";
import {convertToEmbed} from "../lib/utils";
import GlitchText from "./GlitchText.astro";

const songs = await getCollection("songs");

const lastSong = songs.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
)[0];

// Guardamos la fecha para usarla en el cliente
const songDate = lastSong.data.date;
---

<article
  class="flex flex-col items-center justify-center p-6 bg-gradient-to-b from-[#0E1415] to-[#151919] relative overflow-hidden"
>
  <img
    src={lastSong.data.thumbnails.high?.url || IMG_URL_DEFAULT_VIDEO_NOT_FOUND}
    alt="background"
    class="absolute inset-0 w-full h-full object-cover opacity-[0.08] grayscale"
  />
  <div class="relative z-10">
    <h1 class="text-2xl md:text-4xl font-bold mb-4 w-full text-center">
      Último tema hasta la fecha
    </h1>
    <div class="flex flex-col items-center justify-center space-y-4 p-4">
      <img
        src={lastSong.data.thumbnails.high?.url ||
          IMG_URL_DEFAULT_VIDEO_NOT_FOUND}
        alt={lastSong.data.shortTitle}
        class="song-image w-full max-w-md cursor-pointer hover:scale-105 transition video-container"
        data-url={convertToEmbed(lastSong.data.url)}
        data-clip-item
      />
      <GlitchText
        text={lastSong.data.shortTitle}
        className="text-3xl md:text-5xl font-glitch text-center"
      />

      <p class="text-gray-600 text-center relative-time" data-date={songDate}>
        Cargando...
      </p>
    </div>
  </div>
</article>

<script>
  // @ts-nocheck
  // Versión JS de getTimeAgo para el cliente
  function getTimeAgo(date) {
    const now = new Date();
    const d = new Date(date);
    const seconds = Math.floor((now.getTime() - d.getTime()) / 1000);
    if (isNaN(seconds)) return "fecha inválida";
    if (seconds < 60) return "unos segundos";
    const intervals = [
      {label: "año", seconds: 31536000},
      {label: "mes", seconds: 2592000},
      {label: "día", seconds: 86400},
      {label: "hora", seconds: 3600},
      {label: "minuto", seconds: 60},
    ];
    for (const interval of intervals) {
      const count = Math.floor(seconds / interval.seconds);
      if (count >= 1) {
        return `${count} ${interval.label}${count > 1 ? "s" : ""}`;
      }
    }
    return "unos segundos";
  }

  function updateRelativeTime() {
    const timeElements = document.querySelectorAll(".relative-time");
    timeElements.forEach((element) => {
      const date = element.getAttribute("data-date");
      if (date) {
        const timeAgo = getTimeAgo(date);
        element.textContent = `Hace ${timeAgo}`;
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", updateRelativeTime);
  } else {
    updateRelativeTime();
  }
  setInterval(updateRelativeTime, 60000);
</script>
